name: API Development Pipeline
on:
  push:
    branches:
      - main
jobs:
  pre-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build and Publish Hangfire Server
        run: dotnet publish -c Release -o ./publish
        working-directory: ./src/Services/HangFireServer
        
      - name: Build and Publish Identity
        run: dotnet publish -c Release -o ./publish
        working-directory: ./src/Services/Identity/Identity.API
      
      - name: Build and Publish Portal
        run: dotnet publish -c Release -o ./publish
        working-directory: ./src/Services/Portal/Portal.API
  build:
    runs-on: ubuntu-latest
    needs: pre-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Hangfire Server
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/Services/HangFireServer/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/zaeshop-hangfireserver-dev:latest

      - name: Build and push Identity API
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/Services/Identity/Identity.API/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/zaeshop-identity-dev:latest

      - name: Build and push Portal API
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/Services/Portal/Portal.API/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/zaeshop-portal-dev:latest
  deploy:
    name: Deploy to EC2
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Build & Deploy
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{ secrets.SSH_HOST }}
          USER_NAME: ${{ secrets.USER_NAME }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
            # Now we have got the access of EC2 and we will start the deploy.
            #sudo docker-compose down &&
            #sudo docker system prune --all --volumes --force &&
            #sudo docker-compose -f "docker-compose.development.yml" up -d
            sudo docker compose down &&
            sudo docker system prune --all --volumes --force &&
            sudo docker compose -f "docker-compose.yml" up -d
          '
