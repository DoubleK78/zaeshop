{"version":3,"file":"static/js/469.ca0274aa.chunk.js","mappings":"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","sources":["services/album-detail-collection/bulkCreateCollectionService.ts","pages/album/BulkCreateCollectionPage.tsx"],"sourcesContent":["import { BulkCreateCollectionRequest } from \"../../models/album-detail-collection/BulkCreateCollectionRequest\";\nimport { portalServer } from \"../baseUrls\";\nimport axiosApiInstance from \"../interceptor\";\n\nexport const bulkCreateCollectionItemApi = async (albumId: string, model: BulkCreateCollectionRequest[]) => {\n    const response = await axiosApiInstance.post(portalServer + `/api/album/${albumId}/collections/bulk-create`, model);\n    return response;\n}","import { Link, useParams } from \"react-router-dom\";\nimport { StoreState, useAppDispatch } from \"../../store\";\nimport { useTranslation } from \"react-i18next\";\nimport { useSelector } from \"react-redux\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { getAlbumDetailAsyncThunk } from \"../../store/reducers/albumDetailCollectionSlice\";\nimport { useDropzone } from 'react-dropzone';\nimport { BulkCreateCollectionRequest } from \"../../models/album-detail-collection/BulkCreateCollectionRequest\";\nimport { RegexHelper } from \"../../utils/regex\";\nimport { toast } from \"react-toastify\";\nimport { bulkCreateCollectionItemApi } from \"../../services/album-detail-collection/bulkCreateCollectionService\";\n\nconst baseStyle: any = {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: '20px',\n    borderWidth: 2,\n    borderRadius: 2,\n    borderColor: '#eeeeee',\n    borderStyle: 'dashed',\n    backgroundColor: '#fafafa',\n    color: '#bdbdbd',\n    outline: 'none',\n    transition: 'border .24s ease-in-out'\n};\n\nconst BulkCreateCollectionPage = () => {\n    const { albumId } = useParams();\n    const dispatch = useAppDispatch();\n    const [t] = useTranslation();\n    const { albumDetail } = useSelector((state: StoreState) => state.albumDetailCollection);\n    const [files, setFiles] = useState<File[]>([]);\n    const [albumFolderName, setAlbumFolderName] = useState<string | null>(null);\n\n    const onDrop = useCallback((acceptedFiles: File[]) => {\n        setFiles([...files, ...acceptedFiles])\n    }, [files]);\n    const { getRootProps, getInputProps } = useDropzone({ accept: { 'image/*': [] }, onDrop });\n\n    useEffect(() => {\n        dispatch(getAlbumDetailAsyncThunk({ id: albumId }));\n    }, [dispatch, albumId]);\n\n    const onReset = () => {\n        setFiles([]);\n        setAlbumFolderName(null);\n    }\n\n    const previewCollectionGroupBy = useMemo(() => {\n        if (files.length > 0) {\n            if (files.length == 0) {\n                return [];\n            }\n            const firstFile: any = files[0];\n            const isAlbumFolder = firstFile.path.split(\"/\").length > 3;\n            const isCollectionFolder = firstFile.path.split(\"/\").length > 2;\n            // Case 1: Albums/Collections/Items\n            if (isAlbumFolder) {\n                const folderGroupByReduce = files.reduce((folderGroups: BulkCreateCollectionRequest[], file: any) => {\n                    const folderName = file.path.split('/')[2];\n                    const folder = folderGroups.find(folderGroup => folderGroup.name === folderName);\n\n                    if (folder) {\n                        folder.contentItems.push({\n                            name: file.name,\n                            size: file.size\n                        });\n                    }\n                    else {\n                        folderGroups.push({\n                            name: folderName,\n                            contentItems: [{\n                                name: file.name,\n                                size: file.size\n                            }]\n                        });\n                    }\n\n                    return folderGroups;\n                }, []);\n                setAlbumFolderName(firstFile.path.split(\"/\")[1]);\n\n                return folderGroupByReduce;\n            }\n            // Case 2: Collections/Items\n            else if (isCollectionFolder) {\n                const folderGroupByReduce = files.reduce((folderGroups: BulkCreateCollectionRequest[], file: any) => {\n                    const folderName = file.path.split('/')[1];\n                    const folder = folderGroups.find(folderGroup => folderGroup.name === folderName);\n\n                    if (folder) {\n                        folder.contentItems.push({\n                            name: file.name,\n                            size: file.size\n                        });\n                    }\n                    else {\n                        folderGroups.push({\n                            name: folderName,\n                            contentItems: [{\n                                name: file.name,\n                                size: file.size\n                            }]\n                        });\n                    }\n\n                    return folderGroups;\n                }, []);\n\n                setAlbumFolderName(null);\n\n                return folderGroupByReduce;\n            }\n\n            setAlbumFolderName(null);\n        }\n        return [];\n    }, [files]);\n\n    const onDeleteFolder = (folderName: string) => {\n        setFiles(files.filter((file: any) => file.path.split(\"/\")[1] !== folderName));\n    }\n\n    const listFiles = useMemo(() => {\n        return previewCollectionGroupBy.sort((a, b) => RegexHelper.getNumberByText(a.name) - RegexHelper.getNumberByText(b.name)).map((item, index) => (\n            <li key={index}>\n                {item.name}\n                <button className=\"btn\"\n                    onClick={() => onDeleteFolder(item.name)}>\n                    <i className=\"fa-solid fa-trash text-danger font-16\"></i>\n                </button>\n                <ul>\n                    {item.contentItems.sort((a, b) => RegexHelper.getNumberByText(a.name) - RegexHelper.getNumberByText(b.name)).map((contentItem, index) => (\n                        <li key={index}>\n                            {contentItem.name} - {contentItem.size} bytes\n                        </li>\n                    ))}\n                </ul>\n            </li>\n        ));\n    }, [previewCollectionGroupBy]);\n\n    const onSubmit = async () => {\n        const toastId = toast.loading(t(\"toast.please_wait\"), {\n            hideProgressBar: true\n        });\n\n        const response = await bulkCreateCollectionItemApi(albumId!, previewCollectionGroupBy);\n        if (response.status === 200) {\n            toast.update(toastId, {\n                render: t(\"toast.create_sucessfully\"), type: toast.TYPE.SUCCESS, isLoading: false,\n                autoClose: 2000\n            });\n        }\n\n        toast.done(toastId);\n    }\n\n    return (\n        <>\n            <div className=\"page-wrapper\">\n                {/* Page Content*/}\n                <div className=\"page-content-tab\">\n                    <div className=\"container-fluid\">\n                        {/* Page-Title */}\n                        <div className=\"row\">\n                            <div className=\"col-sm-12\">\n                                <div className=\"page-title-box\">\n                                    <div className=\"float-end\">\n                                        <ol className=\"breadcrumb\">\n                                            <li className=\"breadcrumb-item\">\n                                                <a href=\"crm-contacts.html#\">Dashboard</a>\n                                            </li>\n                                            {/*end nav-item*/}\n                                            <li className=\"breadcrumb-item\">\n                                                <a href=\"crm-contacts.html#\">CMS</a>\n                                            </li>\n                                            {/*end nav-item*/}\n                                            <li className=\"breadcrumb-item active\">Album Detail</li>\n                                            <li className=\"breadcrumb-item active\">\n                                                <Link to={`/albums/${albumId}`}>{albumDetail?.title}</Link>\n                                            </li>\n                                            <li className=\"breadcrumb-item active\">{t(\"album_detail.bulk_create\")}</li>\n                                        </ol>\n                                    </div>\n                                    <h4 className=\"page-title\">{t(\"album_detail.bulk_create\")}</h4>\n                                </div>\n                                {/*end page-title-box*/}\n                            </div>\n                            {/*end col*/}\n                        </div>\n                        {/* end page title end breadcrumb */}\n                        <div className=\"row mb-3\">\n                            <div className=\"row\">\n                                <div className=\"row\">\n                                    <div className=\"col-12\">\n                                        <div className=\"card\">\n                                            <div className=\"card-header\">\n                                                <div className=\"row align-items-center\">\n                                                    <div className=\"col\">\n                                                        <h4 className=\"card-title\">{t('album_detail.bulk_create_sub_title')}</h4>\n                                                        <p className=\"text-muted mb-0\">{t('album_detail.bulk_create_sub_description')}</p>\n                                                    </div>\n                                                    {/*end col*/}\n                                                </div>{\" \"}\n                                                {/*end row*/}\n                                            </div>\n                                            {/*end card-header*/}\n                                            <div className=\"card-body\">\n                                                <button\n                                                    type=\"button\"\n                                                    className=\"btn btn-light\"\n                                                    onClick={onReset}\n                                                >\n                                                    {t('content_item.reset')}\n                                                </button>\n                                                <button\n                                                    type=\"button\"\n                                                    className=\"btn btn-primary\"\n                                                    onClick={onSubmit}\n                                                >\n                                                    {t('content_item.upload_button')}\n                                                </button>\n                                                <div className=\"d-grid mt-2\">\n                                                    <div {...getRootProps({ className: 'dropzone', style: baseStyle })}>\n                                                        <input {...getInputProps()} />\n                                                        <p>Drag 'n' drop some files here, or click to select files</p>\n                                                    </div>\n                                                    <aside>\n                                                        <h4>{t('album_detail.bulk_create_Preview')}</h4>\n                                                        {albumFolderName && <h4 className=\"text-primary\">{albumFolderName}</h4>}\n                                                        <ul>{listFiles}</ul>\n                                                    </aside>\n                                                </div>\n                                            </div>\n                                            {/*end card-body*/}\n                                        </div>\n                                        {/*end card*/}\n                                    </div>{\" \"}\n                                    {/*end col*/}\n                                </div>\n                                {/*end row*/}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default BulkCreateCollectionPage;"],"names":["bulkCreateCollectionItemApi","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","albumId","model","response","wrap","_context","prev","next","axiosApiInstance","post","portalServer","concat","sent","abrupt","stop","_x","_x2","apply","arguments","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","useParams","dispatch","useAppDispatch","_useTranslation","useTranslation","t","_slicedToArray","albumDetail","useSelector","state","albumDetailCollection","_useState","useState","_useState2","files","setFiles","_useState3","_useState4","albumFolderName","setAlbumFolderName","onDrop","useCallback","acceptedFiles","_toConsumableArray","_useDropzone","useDropzone","accept","getRootProps","getInputProps","useEffect","getAlbumDetailAsyncThunk","id","previewCollectionGroupBy","useMemo","length","firstFile","isAlbumFolder","path","split","isCollectionFolder","folderGroupByReduce","reduce","folderGroups","file","folderName","folder","find","folderGroup","name","contentItems","push","size","listFiles","sort","a","b","RegexHelper","getNumberByText","map","item","index","_jsxs","children","_jsx","className","onClick","filter","contentItem","onSubmit","toastId","toast","loading","hideProgressBar","status","update","render","type","TYPE","SUCCESS","isLoading","autoClose","done","_Fragment","href","Link","to","title","_objectSpread","style"],"sourceRoot":""}